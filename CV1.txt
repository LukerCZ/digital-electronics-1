------------------------------------------------------------
--
-- Example of basic OR, AND, XOR gates.
-- EDA Playground
--
-- Copyright (c) 2019-Present Tomas Fryza
-- Dept. of Radio Electronics, Brno Univ. of Technology, Czechia
-- This work is licensed under the terms of the MIT license.
--
------------------------------------------------------------

library ieee;                -- Standard library
use ieee.std_logic_1164.all; -- Package for data type
                             -- and logic operations

------------------------------------------------------------
-- Entity declaration for basic gates
------------------------------------------------------------
entity gates is
    port(
    	c_i	   : in   std_logic;
        b_i    : in   std_logic; -- Data inputs
        a_i    : in   std_logic;
        f_o    : out  std_logic;
        fnand_o: out  std_logic;
        fnor_o : out  std_logic 

    );
end entity gates;

------------------------------------------------------------
-- Architecture body for basic gates
------------------------------------------------------------
architecture dataflow of gates is
begin
	f_o     <= (not b_i and a_i) or (not c_i and not b_i);
    fnand_o <= '1';
    fnor_o  <= '0';
end architecture dataflow;



------------------------------------------------------------
--
-- Testbench for basic gates circuit.
-- EDA Playground
--
-- Copyright (c) 2020-Present Tomas Fryza
-- Dept. of Radio Electronics, Brno Univ. of Technology, Czechia
-- This work is licensed under the terms of the MIT license.
--
------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;

------------------------------------------------------------
-- Entity declaration for testbench
------------------------------------------------------------
entity tb_gates is
    -- Entity of testbench is always empty
end entity tb_gates;

------------------------------------------------------------
-- Architecture body for testbench
------------------------------------------------------------
architecture testbench of tb_gates is

    -- Local signals
    signal s_b    : std_logic;
    signal s_a    : std_logic;
    signal s_c 	  : std_logic;
    signal s_fnand: std_logic;
    signal s_fnor : std_logic;
	signal s_f	  : std_logic;

begin
    -- Connecting testbench signals with gates entity
    -- (Unit Under Test)
    uut_gates : entity work.gates
        port map(
        	c_i	   => s_c,
            b_i    => s_b,
            a_i    => s_a,
            f_o    => s_f,
            fnand_o => s_fnand,
            fnor_o => s_fnor
        );

    --------------------------------------------------------
    -- Data generation process
    --------------------------------------------------------
    p_stimulus : process
    begin
        -- Set one test case and wait 100 ns
        s_c <= '0'; s_b <= '0'; s_a <= '0'; wait for 100 ns;
        s_c <= '0'; s_b <= '0'; s_a <= '1'; wait for 100 ns;
        s_c <= '0'; s_b <= '1'; s_a <= '0'; wait for 100 ns;
        s_c <= '0'; s_b <= '1'; s_a <= '1'; wait for 100 ns;
        s_c <= '1'; s_b <= '0'; s_a <= '0'; wait for 100 ns;
        s_c <= '1'; s_b <= '0'; s_a <= '1'; wait for 100 ns;
        s_c <= '1'; s_b <= '1'; s_a <= '0'; wait for 100 ns;
        s_c <= '1'; s_b <= '1'; s_a <= '1'; wait for 100 ns;
        wait;
    end process p_stimulus;

end architecture testbench;
